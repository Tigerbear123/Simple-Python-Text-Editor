from tkinter import *
import tkinter.messagebox as tsmg
from tkinter.filedialog import askopenfilename,asksaveasfilename

# This creates a new file  
def newFile():
    global file
    file=None
    textArea.delete(1.0,END)

# This opens the file selected by the user
def openFile():
    global file
    file=None
    file=askopenfilename(defaultextension=".txt",filetypes=[("All Files","*.*"),
                                                            ("Text Documents","*.txt")])
    if file=="": # If no file is selected, no file is opened
        file=None
    else:   # If a file is selected, the selected file opens
        textArea.delete(1.0,END)
        f=open(file,"r")
        textArea.insert(1.0,f.read())
        f.close()
def saveFile():
    global file
    if file==None:   #If a file is saved for the first time, the application will ask for a name
        file=asksaveasfilename(initialfile="Untitled.txt",defaultextension=".txt",
                            filetypes=[("All Files","*.*"),
                                        ("Text Document","*.txt")])
        if file=="":    # If no file is selected, the file won't be saved
            file=None
        else:           # If a file is selected, the selected file saves
            f=open(file,'w')
            f.write(textArea.get(1.0,END))
            f.close()
    
    else:
        f=open(file,'w')
        f.write(textArea.get(1.0,END))
        f.close()
# This allows the user to exit the GUI application when they hit "Exit" via "File".         
def exitApp():
    window.destroy()
# This allows the user to cut text in the window when they hit "Cut" via "File". 
def cutOper():
    textArea.event_generate("<<Cut>>")
# This allows the user to copy text in the window when they hit "Copy" via "File". 
def copyOper():
    textArea.event_generate("<<Copy>>")
# This allows the user to paste text in the window when they hit "Paste" via "File". 
def pasteOper():
    textArea.event_generate("<<Paste>>")
# This allows the user to view the manual when they hit "Manual" via "Help". 
def about():
    tsmg.showinfo("About","This is a text editor developed in Python. You can type anything in this window. You can create, open, and save files in the File menu as well as exiting the application. You can cut, copy, and paste your text in the Edit menu.")

# The dimensions of the window
window =Tk()
window.geometry("700x900")
window.minsize(420,420)
window.title("GUI Text Editor")
# This adds the text area in the window to type as well as setting its default font. 
textArea=Text(window,font=('lucida 15'))
textArea.pack(expand=True,fill=BOTH)
file =None
# This adds the menu bar for the file and edit menus. 
MenuBar=Menu(window)
# This adds the file menu and all of its commands. 
fileMenu=Menu(MenuBar,tearoff=0)
fileMenu.add_command(label='New',command=newFile)
fileMenu.add_command(label='Open',command=openFile)
fileMenu.add_command(label='Save',command=saveFile)
fileMenu.add_command(label='Exit',command=exitApp)
MenuBar.add_cascade(label='File',menu=fileMenu)
# This adds the edit menu and all of its commands.
editMenu=Menu(window,tearoff=0)
editMenu.add_command(label='Cut',command=cutOper)
editMenu.add_command(label='Copy',command=copyOper)
editMenu.add_command(label='Paste',command=pasteOper)
MenuBar.add_cascade(label='Edit',menu=editMenu)
# This adds the help menu and the description of what this application is about. 
helpMenu=Menu(window,tearoff=0)
helpMenu.add_command(label='About',command=about)
MenuBar.add_cascade(label='Help',menu=helpMenu)
# This adds the scrollbar and its functionality. 
scroll=Scrollbar(textArea)
scroll.pack(side=RIGHT,fill=Y)
scroll.config(command=textArea.yview)
textArea.config(yscrollcommand=scroll.set)
window.config(menu=MenuBar)
window.mainloop()
